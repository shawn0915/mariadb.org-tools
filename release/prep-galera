#!/bin/bash
#===============================================================================
#
#          FILE: prep-galera
# 
#         USAGE: ./prep-galera <version>
# 
#   DESCRIPTION: This script exists so that I don't need to remember or look up
#                where things are when it is time to prepare new galera files.
#                It also ensures no steps are forgotten, and prevents many
#                errors. It's purpose is to prepare new galera library packages
#                so they are ready for inclusion in MariaDB releases.
# 
#        AUTHOR: Daniel Bartholomew (db), dbart@mariadb.org
#  ORGANIZATION: 
#       CREATED: 2016-01-28 15:08 EDT
#      REVISION:  ---
#===============================================================================

umask 002

#killall gpg-agent
set -eu
  # -e  Exit immediately if a simple command exits with a non-zero status,
  #     unless the command that fails is part of an until or  while loop, part
  #     of an if statement, part of a && or || list, or if the command's return
  #     status is being inverted using !.  -o errexit
  #
  # -u  Treat unset variables as an error when performing parameter expansion.
  #     An error message will be written to the standard error, and a
  #     non-interactive shell will exit.
  #
  # -x  Print a trace of simple commands and their arguments after they are
  #     expanded and before they are executed.

#------------------------------------------------------------------------------
# Options (set these before running the script)
#------------------------------------------------------------------------------

# defaults (to prevent errors)
    displayusage="no"
log_displayusage=""
            demo="no"
        log_demo=""
      run_script="no"
  log_run_script=""
          is_ent="no"
      log_is_ent=""
   create_bintar="no"
   create_source="no"
      create_win="no"
      create_deb="no"
      create_rpm="no"
     create_repo="no"
      create_yum="no"
     incl_galera="no"
      is_cluster="no"
  log_is_cluster=""
             log="no"
         log_log=""
         is_test="no"
galera_suffix=""
     treeflag=false
      revflag=false
      numflag=false
      tarflag=false


# The first thing we need to do is parse the command-line options
while getopts 'dhlr:t:v:y' OPTION
do
  case $OPTION in
    d)  # Not implemented yet
      demo="yes"
      log_demo="d"
      ;;
    h)  # Display a helpful usage message
      displayusage="yes"
      log_displayusage="h"
      ;;
    l)  # Log the release to ${dir_log}/prep.log
      log="yes"
      log_log="l"
      ;;
    r)  # The release revision
      rev="${OPTARG}"
      revflag=true
      ;;
    t)  # The release tree
      tree="${OPTARG}"
      treeflag=true
      ;;
    v)  # The version number of this release
      num="${OPTARG}"
      numflag=true
      ;;
    y)  # Actually run this script (helps prevent accidental runs)
      run_script="yes"
      log_run_script="y"
      ;;
    \?) # Display a helpful usage message
      displayusage="yes"
      ;;
    :)  # Error when an option is used that requires an argument
      displayusage="yes"
      echo "Option -$OPTARG requires an argument."
      ;;
  esac
done

shift $(($OPTIND - 1))

deb_dists="
  bionic
  cosmic
  buster
  jessie
  sid
  stretch
  trusty
  xenial
"
deb_dists_full="
  bionic-aarch64
  bionic-amd64
  bionic-ppc64le

  buster-amd64

  cosmic-amd64

  jessie-amd64
  jessie-ppc64le
  jessie-x86

  sid-amd64
  sid-x86
  
  stretch-amd64
  stretch-ppc64le
  stretch-x86

  trusty-amd64
  trusty-ppc64le
  trusty-x86

  xenial-aarch64
  xenial-amd64
  xenial-ppc64le
  xenial-x86
"

rpm_dists="
  centos6-x86
  centos6-amd64

  centos73-amd64
  centos73-ppc64
  centos73-ppc64le

  centos74-aarch64
  centos74-amd64

  rhel8-amd64

  fedora28-amd64
  fedora29-amd64

  opensuse42-amd64
  opensuse423-amd64
  opensuse150-amd64

  sles12-amd64
  sles123-amd64
  sles12-ppc64le
  sles150-amd64
"

#-------------------------------------------------------------------------------
# Options below this point you probably don't need to change
#-------------------------------------------------------------------------------

# Various miscellaneous options
rsync_opts="-a -L"

# set location of prep.conf and prep.log to XDG-compatible directories and then
# create them if they don't exist
dir_conf=${XDG_CONFIG_HOME:-~/.config}
dir_log=${XDG_DATA_HOME:-~/.local/share}


#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------

function runCommand() {
  echo "+ ${@}"
  sleep 1
  if ${@} ; then
    return 0
  else
    return 1
  fi
}

userResponse() {
  question="${@}"
  read -p "${question} " -n 1
  echo
  ANSWER=${REPLY}
  RESPONSE=${REPLY}
  return 0
}

userInput() {
  question="$@"
  echo
  read -p "${question} "
  echo
  INPUT=${REPLY}
  return 0
}

secureUserInput() {
  question="${@}"
  SECUREINPUT="false"
  REPLY="alsofalse"
  while [ "${SECUREINPUT}" != "${REPLY}" ]; do
    read -s -p "${question} "
    echo
    SECUREINPUT="${REPLY}"
    read -s -p "Please enter it again: "
    echo
    if [ "${SECUREINPUT}" != "${REPLY}" ]; then
      echo
      echo "The two entries do not match."
      echo
    else
      echo
      echo "The two entries match. Continuing."
      echo
      return 0
    fi
  done
}

prepare_bintar_packages() {
  create_bintar="yes"
}

prepare_source_package() {
  create_source="yes"
}

prepare_Windows_packages() {
  create_win="yes"
}

prepare_deb_packages() {
  create_deb="yes"
}

prepare_rpm_packages() {
  create_rpm="yes"
}

prepare_deb_repository() {
  create_repo="yes"
}

prepare_yum_repository() {
  create_yum="yes"
}

include_Galera_packages_in_repositories() {
  incl_galera="yes"
}

logSettings() {
cat >> ${dir_log}/prep.log <<END

# Prepped $(date)
# Command:
#   prep-galera -${log_displayusage}${log_demo}${log_run_script}${log_log} -t ${tree} -r ${rev} -v ${num}
# tree="${tree}"
# rev="${rev}"
# num="${num}"
# version="${version}"
# release_dir/dir_name="${release_dir}/${dir_name}"
# create_bintar="${create_bintar}"
# create_source="${create_source}"
# create_deb="${create_deb}"
# create_rpm="${create_rpm}"
# archive_dir="${archive_dir}"
# release_dir="${release_dir}"
# gpg_opts="${gpg_opts}"
# ent_gpg_opts="${ent_gpg_opts}"
END
chown ${USER}: ${dir_log}/prep.log
}


pressAnyKeyToContinue() {
  echo
  read -p "Press any key to continue." -n 1
  echo
  return 0
}

shouldI() {
  local cont
  cont=""
   while [ -z ${cont} ]; do
     userResponse "Should I ${@//_/ }? [y/n]"
     case ${ANSWER} in
      "y")
        ${@}
        cont="yes"
        return 0
        ;;
      "n")
        echo "Skipping . . . "
        cont="yes"
        return 0
        ;;
      *)
        echo "Please answer [y]es or [n]o."
        echo
        cont=""
        ;;
    esac
  done
}

treat_this_as_a_test() {
  is_test="yes"
}

loadDefaults() {
  # Load the paths (if they exist)
  if [ -f ${dir_conf}/prep.conf ]; then
      . ${dir_conf}/prep.conf
  else
    echo
    echo "The file ${dir_conf}/prep.conf does not exist in your home."
    echo "The prep script creates a default template of this file when run."
    echo "Exiting..."
    exit 1
  fi
}

usage() {
  set +x
  echo
  echo
  echo "usage: $0 -y[deghl] -t <tree> -r <revision> -v <version>"
  echo "  -y : actually run the script"
  echo "  -d : run the script in demo mode"
  echo "  -h : display this usage message"
  echo "  -l : log the <tree>, <revision>, & etc... to ${dir_log}/prep.log"
  echo "  -t <tree> : the Galera source code tree"
  echo "  -r <revision> : the Galera source code tree revision"
  echo "  -v <version> : the Galera version number"
  echo
  echo
  set -x
}

line() {
  echo "-------------------------------------------------------------------------------"
}


#-------------------------------------------------------------------------------
# Main Script
#-------------------------------------------------------------------------------

if ! ${revflag} || ! ${numflag} || ! ${treeflag} ; then
  #if [[ -d $1 ]]; then
    echo
    line
    echo "-r -t and -v, along with their appropriate arguments, are mandatory" >&2
    line
    usage
    exit 4
  #fi
fi

#if (( `id -u` != 0 )); then { echo "Sorry, ${0} must be run using sudo. Exiting..."; exit; } fi

# Display usage message and quit if necessary
if [ "${displayusage}" = "yes" ] || [ "${run_script}" != "yes" ]; then
  usage
  exit 0
fi

loadDefaults                                    # Load Default paths and vars

# Customizations because we are not prepping a MariaDB release
version="galera-${num}"
suffix_ent="signed-ent"
suffix="signed"

shouldI treat_this_as_a_test

if [ "${is_test}" = "yes" ]; then
  release_dir="${dir_galera}-test"
else
  release_dir="${dir_galera}"
fi

dir_name="${version}"
archive_dir="/ds413/archive/builds"

case ${tree} in
  "mariadb-3.x")
    build_dirs_x86="kvm-rpm-centos6-x86-gal:galera-${num}-i686 kvm-deb-trusty-x86-gal:galera-${num}-glibc_214-i686 kvm-deb-trusty-x86-gal:galera-${num}-systemd-i686"
    ;;
  "mariadb-4.x")
    build_dirs_x86="kvm-deb-trusty-x86-gal:galera-${num}-glibc_214-i686 kvm-deb-trusty-x86-gal:galera-${num}-systemd-i686"
    ;;
esac
build_dirs_x86_64="kvm-rpm-centos6-amd64-gal:galera-${num}-x86_64 kvm-deb-trusty-amd64-gal:galera-${num}-glibc_214-x86_64 kvm-deb-trusty-amd64-gal:galera-${num}-systemd-x86_64"
build_dirs_p8="kvm-rpm-centos73-ppc64le-gal:galera-${num}-ppc64le kvm-rpm-centos73-ppc64-gal:galera-${num}-ppc64 kvm-rpm-centos74-aarch64-gal:galera-${num}-aarch64"

build_dirs="${build_dirs_x86} ${build_dirs_x86_64} ${build_dirs_p8}"

shouldI prepare_source_package
shouldI prepare_bintar_packages
shouldI prepare_deb_packages
shouldI prepare_rpm_packages
shouldI prepare_deb_repository
shouldI prepare_yum_repository


if [ ${log} = "yes" ]; then
  logSettings
fi

#exit 0;


echo
echo
line
echo "+ creating the ${version} release"
line
eval $(gpg-agent --daemon)

if [ ! -d ${release_dir}/${dir_name} ]; then
  line
  echo "+ creating release dir..."
  line
  mkdir -v ${release_dir}/${dir_name}
  if [ ! -d ${release_dir}/${dir_name}-signed ]; then
    mkdir -v ${release_dir}/${dir_name}-signed
  fi
  if [ ! -d ${release_dir}/${dir_name}-signed-ent ]; then
    mkdir -v ${release_dir}/${dir_name}-signed-ent
  fi
fi
cd ${release_dir}/${dir_name}
echo
line
echo "+ fixing permissions..."
pressAnyKeyToContinue
line
for dir in $(sudo find ${archive_dir}/${tree}/${rev}/ -type d);do sudo chmod 755 "${dir}";done
for file in $(sudo find ${archive_dir}/${tree}/${rev}/ -type f);do sudo chmod 644 "${file}";done
echo "+ done fixing permissions"
echo
echo

#-------------------------------------------------------------------------------
#  Source Tarball
#-------------------------------------------------------------------------------
# Manually generate the src tarball
if [ "${create_source}" != "no" ]; then
  line
  echo "+ generating source tarball..."
  line
  if [ ! -d ${release_dir}/${dir_name}/src ]; then
    mkdir -v ${release_dir}/${dir_name}/src
  fi
  cd ~/src
  if [ -d galera ];then
    rm -rf galera
  fi
  git clone https://github.com/MariaDB/galera.git
  cd galera
  git checkout ${tree}
  git reset --hard ${rev}
  git submodule init
  git submodule update
  scripts/build.sh -a
  git submodule foreach 'cp -vi * ../../galera-*/${path}/'
  gunzip ${version}.tar.gz
  tar --update -vf ${version}.tar ${version}/
  gzip ${version}.tar
  mv -vi ${version}.tar.gz ${release_dir}/${dir_name}/src/
  rm -rf ~/src/galera

  # removing src rsync if statement (db:2017-01-06)
  #if rsync ${rsync_opts} "${archive_dir}/${tree}/${rev}/src/${version}.tar.gz" "${release_dir}/${dir_name}/src/"; then
    cd ${release_dir}/${dir_name}/src
    for sum in md5 sha1 sha256 sha512;do echo ${sum}; ${sum}sum ./galera* >> ${sum}sums.txt; ${sum}sum -c ${sum}sums.txt;done

    # before signing the files, copy them to the ent dir
    cp -avi ${release_dir}/${dir_name}/src ${release_dir}/${dir_name}-signed-ent/

    echo "+ signing source tarball and sum files..."
    cd ${release_dir}/${dir_name}/src/
    # remove any signature files before signing, if they exist
    for sig_file in $(ls ./*.asc); do
      rm -v "${sig_file}"
    done
    # sign the source tarball
    echo "About to sign the source tarball..."
    pressAnyKeyToContinue
    runCommand gpg2 ${gpg_opts} ${version}.tar.gz
    # sign the sum files as well
    for sum in md5 sha1 sha256 sha512;do runCommand "gpg2 ${gpg_opts} ${sum}sums.txt";done
    
    # Copy to the -signed folder
    cp -avi ${release_dir}/${dir_name}/src ${release_dir}/${dir_name}-signed/

    # Switch over to the -signed-ent folder and sign those
    echo "+ signing source tarball and sum files in the -signed-ent folder..."
    cd ${release_dir}/${dir_name}-signed-ent/src/
    # remove any signature files before signing, if they exist
    for sig_file in $(ls ./*.asc); do
      rm "${sig_file}"
    done
    # sign the source tarball
    echo "About to sign the ent source tarball..."
    pressAnyKeyToContinue
    runCommand gpg2 ${ent_gpg_opts} ${version}.tar.gz
    # sign the sum files as well
    for sum in md5 sha1 sha256 sha512;do runCommand "gpg2 ${ent_gpg_opts} ${sum}sums.txt";done
  #fi # removing src rsync if statement (db:2017-01-06)
  echo "+ transfer of src done"
  echo
fi


#-------------------------------------------------------------------------------
#  Binary Tarballs
#-------------------------------------------------------------------------------
if [ "${create_bintar}" != "no" ]; then
  line
  echo "+ transfering bintar packages..."
  line
  if [ ! -d ${release_dir}/${dir_name}/bintar ]; then
    line
    echo "+ creating bintar dir..."
    line
    mkdir -v ${release_dir}/${dir_name}/bintar
    mkdir -v ${release_dir}/${dir_name}-signed/bintar
    mkdir -v ${release_dir}/${dir_name}-signed-ent/bintar
  fi
  cd ${release_dir}/${dir_name}/bintar
  echo
  for dir_pair in ${build_dirs}; do
    dir_array=(${dir_pair//:/ })
    # create the directory
    if [ "${dir_array[1]}" = "src" ]; then
      if [ ! -d ${release_dir}/${dir_name}/${dir_array[1]} ]; then
        mkdir -v ${release_dir}/${dir_name}/${dir_array[1]}
      fi
    else 
      if [ ! -d ${release_dir}/${dir_name}/bintar/${dir_array[1]} ]; then
        mkdir -v ${release_dir}/${dir_name}/bintar/${dir_array[1]}
      fi
    fi

    # This is where we actually extract the binary files
    cd ${release_dir}/${dir_name}/bintar/${dir_array[1]}
    case ${dir_array[1]} in
      "galera-${num}-x86_64"|"galera-${num}-i686"|"galera-${num}-ppc64le"|"galera-${num}-ppc64"|"galera-${num}-aarch64")
          # we are dealing with an .rpm file
          rpm2cpio ${archive_dir}/${tree}/${rev}/${dir_array[0]}/rpms/galera*.rpm | cpio -idmv
          cd usr
          if [ -d lib64 ];then
            if [ -d lib ];then
              # what to do if we have BOTH lib and lib64 dirs
              cd lib
              ln -sv ../lib64/galera ./
              cd ../lib64
              ln -sv galera/libgalera_smm.so ./
              cd ../
            else
              # if we have a lib64 dir and no lib dir
              ln -sv lib64 lib
            fi
          fi
          cd lib
          ln -sv galera/libgalera_smm.so ./
          ;;
      *)
          # we are dealing with .deb files
          case ${tree} in
            "mariadb-4.x")
              dpkg -X ${archive_dir}/${tree}/${rev}/${dir_array[0]}/debs/binary/galera-4_*.deb ./
              dpkg -X ${archive_dir}/${tree}/${rev}/${dir_array[0]}/debs/binary/galera-arbitrator-4_*.deb ./
              ;;
            *)
              dpkg -X ${archive_dir}/${tree}/${rev}/${dir_array[0]}/debs/binary/galera-3_*.deb ./
              dpkg -X ${archive_dir}/${tree}/${rev}/${dir_array[0]}/debs/binary/galera-arbitrator-3_*.deb ./
              ;;
          esac
          ;;
    esac

    # create a tarball
    cd ${release_dir}/${dir_name}/bintar/
    tar -czvf ${dir_array[1]}.tar.gz ${dir_array[1]}/
    for sum in md5 sha1 sha256 sha512;do echo ${sum}; ${sum}sum ./${dir_array[1]}.tar.gz >> ${sum}sums.txt; ${sum}sum -c ${sum}sums.txt;done

    # copy the tarball over to -signed and -signed-ent directories
    cp -avi ${release_dir}/${dir_name}/bintar/${dir_array[1]}.tar.gz ${release_dir}/${dir_name}-signed/bintar/
    cp -avi ${release_dir}/${dir_name}/bintar/${dir_array[1]}.tar.gz ${release_dir}/${dir_name}-signed-ent/bintar/

    #cp -avi ${release_dir}/${dir_name}/bintar/${dir_array[1]} ${release_dir}/${dir_name}-signed/bintar/
    #cp -avi ${release_dir}/${dir_name}/bintar/${dir_array[1]} ${release_dir}/${dir_name}-signed-ent/bintar/

    echo "+ transfer of ${dir_array[1]} done"
    echo;line;echo
  done



  # sign the bintars
  cd ${release_dir}/${dir_name}-signed/bintar/
  echo "About to sign the bintars..."
  pressAnyKeyToContinue
  for file in galera*.tar.gz ; do runCommand "gpg2 ${gpg_opts} ${file}";done
  # copy the sum files over and sign them
  for sum in md5 sha1 sha256 sha512;do echo ${sum}; cp -avi ${release_dir}/${dir_name}/bintar/${sum}sums.txt ./ ; ${sum}sum -c ${sum}sums.txt;runCommand "gpg2 ${gpg_opts} ${sum}sums.txt";done

  # sign the ent-bintars
  cd ${release_dir}/${dir_name}-signed-ent/bintar/
  echo "About to sign the ent bintars..."
  pressAnyKeyToContinue
  for file in galera*.tar.gz ; do runCommand "gpg2 ${ent_gpg_opts} ${file}";done
  # copy the sum files over and sign them
  for sum in md5 sha1 sha256 sha512;do echo ${sum}; cp -avi ${release_dir}/${dir_name}/bintar/${sum}sums.txt ./ ; ${sum}sum -c ${sum}sums.txt;runCommand "gpg2 ${ent_gpg_opts} ${sum}sums.txt";done

  echo "+ done transfering bintar & source packages"
  line
else
  line
  echo "+ skipping transfering bintar & source packages, as requested..."
  line
fi


#-------------------------------------------------------------------------------
#  Create deb dir
#-------------------------------------------------------------------------------
if [ "${create_deb}" != "no" ]; then
  # if the deb dir exists, delete it
  if [ -d ${release_dir}/${dir_name}/deb ]; then
    rm -rf "${release_dir}/${dir_name}/deb"
  fi
  if [ -d ${release_dir}/${dir_name}-signed/deb ]; then
    rm -rf "${release_dir}/${dir_name}-signed/deb"
  fi
  if [ -d ${release_dir}/${dir_name}-signed-ent/deb ]; then
    rm -rf "${release_dir}/${dir_name}-signed-ent/deb"
  fi
  line
  echo "+ creating deb dir..."
  line
  mkdir -v ${release_dir}/${dir_name}/deb
  cd ${release_dir}/${dir_name}/deb/

  # Copy over the deb packages
  for dist in ${deb_dists_full}; do
      cp -avi ${archive_dir}/${tree}/${rev}/kvm-deb-${dist}-gal/debs/binary/galera* ${release_dir}/${dir_name}/deb/
  done


  # sum the deb files prior to copying them to -signed and -signed-ent
  for sum in md5 sha1 sha256 sha512;do echo ${sum}; ${sum}sum ./galera* >> ${sum}sums.txt; ${sum}sum -c ${sum}sums.txt;done

  # copy deb dir to signed and signed-ent dirs
  cp -avi ${release_dir}/${dir_name}/deb ${release_dir}/${dir_name}-signed/
  cp -avi ${release_dir}/${dir_name}/deb ${release_dir}/${dir_name}-signed-ent/

  # sign the deb files for mariadb.org
  cd ${release_dir}/${dir_name}-signed/deb/
  # sign the deb files
  echo "About to sign the debs..."
  pressAnyKeyToContinue
  for file in galera* ; do runCommand "gpg2 ${gpg_opts} ${file}";done
  # sign the sum files as well
  for sum in md5 sha1 sha256 sha512;do runCommand "gpg2 ${gpg_opts} ${sum}sums.txt";done


  # sign the deb files for mariadb.com (aka MariaDB Enterprise)
  cd ${release_dir}/${dir_name}-signed-ent/deb/
  # sign the deb files
  echo "About to sign the ent debs..."
  pressAnyKeyToContinue
  for file in galera* ; do runCommand "gpg2 ${ent_gpg_opts} ${file}";done
  # sign the sum files as well
  for sum in md5 sha1 sha256 sha512;do runCommand "gpg2 ${ent_gpg_opts} ${sum}sums.txt";done



else
  line
  echo "+ Skipping deb dir creation, as requested..."
  line
fi

#-------------------------------------------------------------------------------
#  Create rpm dir
#-------------------------------------------------------------------------------
if [ "${create_rpm}" != "no" ]; then
  line
  echo "+ creating rpm dir..."
  line
  if [ -d ${release_dir}/${dir_name}/rpm ]; then
    rm -rf "${release_dir}/${dir_name}/rpm"
  fi
  if [ -d ${release_dir}/${dir_name}-signed/rpm ]; then
    rm -rf "${release_dir}/${dir_name}-signed/rpm"
  fi
  if [ -d ${release_dir}/${dir_name}-signed-ent/rpm ]; then
    rm -rf "${release_dir}/${dir_name}-signed-ent/rpm"
  fi
  mkdir -v ${release_dir}/${dir_name}/rpm
  cd ${release_dir}/${dir_name}/rpm/

  for dist in ${rpm_dists}; do
    mkdir -v ${release_dir}/${dir_name}/rpm/${dist}
    case ${dist} in
      'sles11-amd64')
        cp -avi ${archive_dir}/${tree}/${rev}/kvm-zyp-sles11sp1-amd64-gal/rpms/galera*.rpm ${release_dir}/${dir_name}/rpm/${dist}/
        ;;
      'sles12-ppc64le')
        if [ "${tree}" = "mariadb-3.x" ];then
          cp -avi ${archive_dir}/${tree}/${rev}/p8-suse12-rpm-gal/rpms/galera*.rpm ${release_dir}/${dir_name}/rpm/${dist}/
        else
          rmdir -v ${release_dir}/${dir_name}/rpm/${dist}
        fi
        ;;
      *)
        cp -avi ${archive_dir}/${tree}/${rev}/kvm-*-${dist}-gal/rpms/galera*.rpm ${release_dir}/${dir_name}/rpm/${dist}/
        ;;
    esac
  done

  #-------------------------------------------------------------------------------
  #  copy rpm dir to signed and signed-ent dirs
  #-------------------------------------------------------------------------------
  cp -avi ${release_dir}/${dir_name}/rpm ${release_dir}/${dir_name}-signed/
  cp -avi ${release_dir}/${dir_name}/rpm ${release_dir}/${dir_name}-signed-ent/

  cd ${release_dir}/${dir_name}/rpm/
  for sum in md5 sha1 sha256 sha512;do echo ${sum}; ${sum}sum ./*/*.rpm >> ${sum}sums.txt; ${sum}sum -c ${sum}sums.txt;done
  # sign the rpms
  echo "About to sign the rpms..."
  pressAnyKeyToContinue
  for file in ./*/*.rpm ; do runCommand "gpg2 ${gpg_opts} ${file}";done
  # sign the sum files as well
  for sum in md5 sha1 sha256 sha512;do runCommand "gpg2 ${gpg_opts} ${sum}sums.txt";done
  
  #-------------------------------------------------------------------------------
  #  sign and sum rpm files for mariadb.org
  #-------------------------------------------------------------------------------
  cd ${HOME}
  echo
  echo "+ Switching ~/.rpmmacros file to std version..."
  echo 
  rm -v .rpmmacros
  ln -sv .rpmmacros-std .rpmmacros
  cd ${release_dir}/${dir_name}-signed/rpm/
  rpmsign --addsign --key-id=${gpg_key} $(find . -name '*.rpm')
  for sum in md5 sha1 sha256 sha512;do echo ${sum}; ${sum}sum ./*/*.rpm >> ${sum}sums.txt; ${sum}sum -c ${sum}sums.txt;done
  # sign the rpms
  echo "About to sign the rpms..."
  pressAnyKeyToContinue
  for file in ./*/*.rpm ; do runCommand "gpg2 ${gpg_opts} ${file}";done
  # sign the sum files as well
  for sum in md5 sha1 sha256 sha512;do runCommand "gpg2 ${gpg_opts} ${sum}sums.txt";done


  #-------------------------------------------------------------------------------
  #  sign and sum rpm files for mariadb.com (aka MariaDB Enterprise)
  #-------------------------------------------------------------------------------
  cd ${HOME}
  echo
  echo "+ Switching ~/.rpmmacros file to ent version..."
  echo 
  rm -v .rpmmacros
  ln -sv .rpmmacros-ent-v3 .rpmmacros

  cd ${release_dir}/${dir_name}-signed-ent/rpm/
  echo "About to sign the ent rpms..."
  pressAnyKeyToContinue
  rpmsign --addsign --key-id=${ent_gpg_key} $(find . -name '*.rpm')
  for sum in md5 sha1 sha256 sha512;do echo ${sum}; ${sum}sum ./*/*.rpm >> ${sum}sums.txt; ${sum}sum -c ${sum}sums.txt;done
  # sign the rpms
  for file in ./*/*.rpm ; do runCommand "gpg2 ${ent_gpg_opts} ${file}";done
  # sign the sum files as well
  for sum in md5 sha1 sha256 sha512;do runCommand "gpg2 ${ent_gpg_opts} ${sum}sums.txt";done
  
  cd ${HOME}
  echo
  echo "+ Switching ~/.rpmmacros file back to standard version..."
  echo 
  rm -v .rpmmacros
  ln -sv .rpmmacros-std .rpmmacros
  cd ${release_dir}/${dir_name}-signed-ent/rpm/

else
  line
  echo "+ Skipping rpm dir creation, as requested..."
  line
fi

if [ "${create_repo}" != "no" ] || [ "${create_yum}" != "no" ]; then
  date=$(date +%F)
  userInput "What galera-3 version should I use? (e.g. 25.3.25)"
  ver_galera3="${INPUT}"

  userInput "What galera-4 version should I use? (e.g. 26.4.0)"
  ver_galera4="${INPUT}"
fi

#-------------------------------------------------------------------------------
#  Create DEB Repository
#-------------------------------------------------------------------------------
if [ "${create_repo}" != "no" ]; then
  line
  echo "+ creating deb repository..."
  line

  architectures="amd64 i386 source"
  architectures_w_ppc64el="amd64 i386 ppc64el source"
  architectures_all="amd64 arm64 i386 ppc64el source"
  gpg_key="0xcbcb082a1bb943db"
  gpg_key_2016="0xF1656F24C74CD1D8"
  mkdir -vp ${release_dir}/galera-test-repo/${date}/repo/deb/conf
  cd ${release_dir}/galera-test-repo/${date}/repo/deb/

  for dist in ${deb_dists}; do
    case ${dist} in
      'trusty'|'jessie') cat >>conf/distributions <<END
Origin: Galera
Label: Galera
Codename: ${dist}
Architectures: ${architectures_w_ppc64el}
Components: main
Description: Galera test repository
SignWith: ${gpg_key}

END
        ;;
      'debian6') cat >>conf/distributions <<END
Origin: Galera
Label: Galera
Codename: squeeze
Architectures: ${architectures}
Components: main
Description: Galera test repository
SignWith: ${gpg_key}

END
        ;;
      'xenial'|'bionic') cat >>conf/distributions <<END
Origin: Galera
Label: Galera
Codename: ${dist}
Architectures: ${architectures_all}
Components: main
Description: Galera test repository
SignWith: ${gpg_key_2016}

END
        ;;
      'stretch') cat >>conf/distributions <<END
Origin: Galera
Label: Galera
Codename: ${dist}
Architectures: ${architectures_w_ppc64el}
Components: main
Description: Galera test repository
SignWith: ${gpg_key_2016}

END
        ;;
      'sid'|'yakkety'|'zesty'|'artful'|'cosmic'|'buster') cat >>conf/distributions <<END
Origin: Galera
Label: Galera
Codename: ${dist}
Architectures: ${architectures}
Components: main
Description: Galera test repository
SignWith: ${gpg_key_2016}

END
        ;;
      *) cat >>conf/distributions <<END
Origin: Galera
Label: Galera
Codename: ${dist}
Architectures: ${architectures}
Components: main
Description: Galera test repository
SignWith: ${gpg_key}

END
        ;;
    esac
  done

  for dist in ${deb_dists_full};do
    case ${dist} in
      'bionic-aarch64')
        echo ${dist}
        vi ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*bionic*_arm64.changes
        reprepro --basedir=. include bionic $_
        vi ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*bionic*_arm64.changes
        reprepro --basedir=. include bionic $_
        ;;
      'bionic-amd64')
        echo ${dist}
        vi ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*bionic*_amd64.changes
        reprepro --basedir=. include bionic $_
        vi ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*bionic*_amd64.changes
        reprepro --basedir=. include bionic $_
        ;;
      'bionic-ppc64le')
        echo ${dist}
        vi ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*bionic*_ppc64el.changes
        reprepro --basedir=. include bionic $_
        vi ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*bionic*_ppc64el.changes
        reprepro --basedir=. include bionic $_
        ;;
      'buster-amd64')
        echo ${dist}
        vi ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*buster*_amd64.changes
        reprepro --basedir=. include buster $_
        vi ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*buster*_amd64.changes
        reprepro --basedir=. include buster $_
        ;;

      'cosmic-amd64')
        echo ${dist}
        vi ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*cosmic*_amd64.changes
        reprepro --basedir=. include cosmic $_
        vi ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*cosmic*_amd64.changes
        reprepro --basedir=. include cosmic $_
        ;;

      'jessie-amd64')
        echo ${dist}
        reprepro --basedir=. include jessie ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*jessie*_amd64.changes
        reprepro --basedir=. include jessie ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*jessie*_amd64.changes
        ;;
      'jessie-ppc64le')
        echo ${dist}
        reprepro --basedir=. include jessie ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*jessie*_ppc64el.changes
        reprepro --basedir=. include jessie ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*jessie*_ppc64el.changes
        ;;
      'jessie-x86')
        echo ${dist}
        reprepro --basedir=. include jessie ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*jessie*_i386.changes
        reprepro --basedir=. include jessie ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*jessie*_i386.changes
        ;;

      'sid-amd64')
        echo ${dist}
        vi ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*sid*_amd64.changes
        reprepro --basedir=. include sid $_
        vi ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*sid*_amd64.changes
        reprepro --basedir=. include sid $_
        ;;
      'sid-x86')
        echo ${dist}
        vi ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*sid*_i386.changes
        reprepro --basedir=. include sid $_
        vi ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*sid*_i386.changes
        reprepro --basedir=. include sid $_
        ;;

      'stretch-amd64')
        echo ${dist}
        vi ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*stretch*_amd64.changes
        reprepro --basedir=. include stretch $_
        vi ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*stretch*_amd64.changes
        reprepro --basedir=. include stretch $_
        ;;
      'stretch-ppc64le')
        echo ${dist}
        vi ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*stretch*_ppc64el.changes
        reprepro --basedir=. include stretch $_
        vi ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*stretch*_ppc64el.changes
        reprepro --basedir=. include stretch $_
        ;;
      'stretch-x86')
        echo ${dist}
        vi ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*stretch*_i386.changes
        reprepro --basedir=. include stretch $_
        vi ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*stretch*_i386.changes
        reprepro --basedir=. include stretch $_
        ;;

      'trusty-amd64')
        echo ${dist}
        reprepro --basedir=. include trusty ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*trusty*_amd64.changes
        reprepro --basedir=. include trusty ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*trusty*_amd64.changes
        ;;
      'trusty-ppc64le')
        echo ${dist}
        reprepro --basedir=. include trusty ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*trusty*_ppc64el.changes
        reprepro --basedir=. include trusty ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*trusty*_ppc64el.changes
        ;;
      'trusty-x86')
        echo ${dist}
        reprepro --basedir=. include trusty ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*trusty*_i386.changes
        reprepro --basedir=. include trusty ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*trusty*_i386.changes
        ;;
      'xenial-aarch64')
        echo ${dist}
        reprepro --basedir=. include xenial ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*xenial*_arm64.changes
        reprepro --basedir=. include xenial ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*xenial*_arm64.changes
        ;;
      'xenial-amd64')
        echo ${dist}
        reprepro --basedir=. include xenial ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*xenial*_amd64.changes
        reprepro --basedir=. include xenial ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*xenial*_amd64.changes
        ;;
      'xenial-ppc64le')
        echo ${dist}
        reprepro --basedir=. include xenial ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*xenial*_ppc64el.changes
        reprepro --basedir=. include xenial ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*xenial*_ppc64el.changes
        ;;
      'xenial-x86')
        echo ${dist}
        reprepro --basedir=. include xenial ${release_dir}/galera-${ver_galera3}-${suffix}/deb/galera*xenial*_i386.changes
        reprepro --basedir=. include xenial ${release_dir}/galera-${ver_galera4}-${suffix}/deb/galera*xenial*_i386.changes
        ;;

      *)
        echo ${dist}
        echo "We should not be here. Error with processing changes file with reprepro"
        exit 1
        ;;
    esac
  done
else
  line
  echo "+ Skipping Debian/Ubuntu repository creation, as requested..."
  line
fi

#-------------------------------------------------------------------------------
#  Create YUM repositories
#-------------------------------------------------------------------------------
if [ "${create_yum}" != "no" ]; then
  line
  echo "+ creating yum repository..."
  line
  # Delete the directory if it exists (we want to start from scratch)
  if [ -d ${release_dir}/galera-test-repo/${date}/repo/rpm ]; then
    rm -rf "${release_dir}/galera-test-repo/${date}/repo/rpm"
  fi
  mkdir -vp ${release_dir}/galera-test-repo/${date}/repo/rpm
  cd ${release_dir}/galera-test-repo/${date}/repo/rpm

  # Here we are going to iterate through the various distros and:
  #   1. create the needed directories
  #   2. copy the correct rpm packages into those directories
  for dist in ${rpm_dists};do
    mkdir -vp ${release_dir}/galera-test-repo/${date}/repo/rpm/${dist}/rpms
    case ${dist} in
      'sles12-ppc64le')
        # no galera4 packages for sles12-ppc64le
        rsync -avP --keep-dirlinks ${release_dir}/galera-${ver_galera3}-${suffix}/rpm/${dist}/ ${release_dir}/galera-test-repo/${date}/repo/rpm/${dist}/rpms/
        ;;
      *)
        rsync -avP --keep-dirlinks ${release_dir}/galera-${ver_galera3}-${suffix}/rpm/${dist}/ ${release_dir}/galera-test-repo/${date}/repo/rpm/${dist}/rpms/
        rsync -avP --keep-dirlinks ${release_dir}/galera-${ver_galera4}-${suffix}/rpm/${dist}/ ${release_dir}/galera-test-repo/${date}/repo/rpm/${dist}/rpms/
        ;;
    esac
  done
  # At this point the files are in place
  # All that's left is to generate the repo metadata  and sign the repomd.xml file
  cd ${release_dir}/galera-test-repo/${date}/repo/rpm/
  for dist in ${rpm_dists}; do
    mv -vi ${dist} ~/ && cd ~/
    case ${dist} in
      'sles114-amd64'|'sles114-x86')
        # SLES 11 doesn't support newer sha256 checksums
        createrepo -s sha --database --pretty ${dist}
        ;;
      *)
        createrepo --database --pretty ${dist}
        ;;
    esac
    mv -vi ${dist} ${release_dir}/galera-test-repo/${date}/repo/rpm/ && cd ${release_dir}/galera-test-repo/${date}/repo/rpm/
    echo "About to sign the repomd.xml file for ${dist}..."
    pressAnyKeyToContinue
    runCommand gpg2 --detach-sign --armor -u ${gpg_key} ${dist}/repodata/repomd.xml
  done
  # one final thing: create symlinks so buildbot tests work
  ln -sv sles150-amd64 sles15-amd64
  ln -sv sles12-ppc64le suse12-ppc64le 
  ln -sv opensuse150-amd64 opensuse15-amd64
  ln -sv centos6-amd64 rhel6-amd64
  ln -sv centos6-x86 rhel6-x86
  ln -sv centos73-amd64 centos7-amd64
  ln -sv centos73-amd64 rhel7-amd64
  ln -sv centos73-ppc64 centos7-ppc64
  ln -sv centos73-ppc64 rhel7-ppc64
  ln -sv centos73-ppc64le centos7-ppc64le
  ln -sv centos73-ppc64le rhel7-ppc64le
  ln -sv centos73-ppc64le rhel71-ppc64le
  ln -sv centos74-aarch64 centos7-aarch64
  ln -sv centos74-aarch64 rhel7-aarch64
else
  line
  echo "+ Skipping yum repository creation, as requested..."
  line
fi


#-------------------------------------------------------------------------------
#  All done
#-------------------------------------------------------------------------------
echo
echo
line
echo "+ done creating the ${version} release!"
line
echo

# now upload to mirrors

echo;echo;echo;echo "+ Now upload using commands similar to the following: 

rsync --dry-run -avP --delete-after ${release_dir}/galera-test-repo/${date}/repo bb01:/var/www/galera/${date}
rsync           -avP --delete-after ${release_dir}/galera-test-repo/${date}/repo bb01:/var/www/galera/${date}

ssh bb01 \"cd /var/www/galera/;rm -v repo; ln -sv ${date}/repo ./\" ; 
line=\"----------------------------------------\"
for host in bb02 bb03;do 
  echo;echo;echo;echo \${line} ; echo \"uploading to \${host}\";echo \${line};
  ssh -t -t bb01 \"rsync -a --info=progress2 --delete-after /var/www/galera/ \${host}:/var/www/galera/\"; 
done;echo;echo;echo
"



#if [ "${is_ent}" = "yes" ];then
#rsync -avP --delete-after --delay-updates --exclude=*.orig ${release_dir}/${dir_name} web04:/home/mariadb-repos/mariadb-enterprise/${num}
#"
#else
#  echo "+ Now upload using a command similar to the following: 
#rsync -avP --delete-after --delay-updates --exclude=*.orig ${release_dir}/${dir_name} osuosl:data/
#"
#fi

# vim: filetype=sh
