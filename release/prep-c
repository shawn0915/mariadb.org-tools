#!/bin/bash - 
#===============================================================================
#
#          FILE:  prep-c
# 
#         USAGE:  ./prep-c <version> <build_dir>
# 
#   DESCRIPTION:  This script is used to prepare files for a MariaDB
#                 Connector/ODBC release
# 
#        AUTHOR: Daniel Bartholomew
#       CREATED: 17/05/23 00:56:37 EST
#===============================================================================


#-------------------------------------------------------------------------------
#  Variables
#-------------------------------------------------------------------------------
version=${1}
dir_build=${2}

dir_c="connector-c-${version}"

# set location of prep.conf and prep.log to XDG-compatible directories and then
# create them if they don't exist
dir_conf=${XDG_CONFIG_HOME:-~/.config}
dir_log=${XDG_DATA_HOME:-~/.local/share}


#-------------------------------------------------------------------------------
#  Functions
#-------------------------------------------------------------------------------

sumgen() {
  for sum in md5 sha1 sha256 sha512;do
	echo;line;echo ${sum};
	${sum}sum ./mar* >> ${sum}sums.txt
	${sum}sum -c ${sum}sums.txt
  done
  echo;line;echo
}

userResponse() {
  question="${@}"
  read -p "${question} " -n 1
  echo
  ANSWER=${REPLY}
  RESPONSE=${REPLY}
  return 0
}

loadDefaults() {
  # Load the paths (if they exist)
  if [ -f ${dir_conf}/prep.conf ]; then
      . ${dir_conf}/prep.conf
  else
    echo
    echo "The file ${dir_conf}/prep.conf does not exist in your home."
    echo "The prep script creates a default template of this file when run."
    echo "Exiting..."
    exit 1
  fi
}

usage() {
  echo
  echo "usage: $0 <version> <build_dir>"
  echo
  exit 1
}

line() {
  echo "-------------------------------------------------------------------------------"
}

shouldI() {
  local cont
  cont=""
   while [ -z ${cont} ]; do
     userResponse "Should I ${@//_/ }? [y/n]"
     case ${ANSWER} in
      "y")
        ${@}
        cont="yes"
        return 0
        ;;
      "n")
        echo "Skipping . . . "
        cont="yes"
        return 0
        ;;
      *)
        echo "Please answer [y]es or [n]o."
        echo
        cont=""
        ;;
    esac
  done
}

copy_and_stage_files() {
  echo;line;echo "fixing permissions";line;

  for dir in $(sudo find ${dir_build} -type d);do
    sudo chmod -c 755 "${dir}"
  done
  for file in $(sudo find ${dir_build} -type f);do
    sudo chmod -c 644 "${file}"
  done

  echo;line;echo "Copying and staging files";line;
  pushd ${cc_home}
    if [[ ! -d "${dir_c}" ]];then
      mkdir -v ${dir_c}
    fi
    for dir in ${dir_build}/*;do
      echo ${dir}
      case $(basename ${dir}) in 
        "linux_x86-connector_c")
          echo
          cp -avi ${dir}/*.gz ${dir_c}/
          cp -avi ${dir}/*.zip ${dir_c}/
          ;;
        "linux_x64-connector_c")
          echo
          cp -avi ${dir}/*x86_64.tar.gz ${dir_c}/
          ;;
        "centos6_i386-connector_c")
          echo
          #cp -avi ${dir}/*i686.tar.gz ${dir_c}/
          ;;
        "win-connector_c")
          echo
          cp -avi ${dir}/*.msi ${dir_c}/
          ;;
        "win-connector_c_3")
          echo
          cp -avi ${dir}/*.msi ${dir_c}/
          ;;
        "labrador")
          #cp -avi ${dir}/*.gz ${dir_c}/
          echo
          echo "skipping ${dir}"
          echo
          ;;
        "freebsd11_x64-connector_c")
          cp -avi ${dir}/*amd64.tar.gz ${dir_c}/
          #echo
          #echo "skipping ${dir}"
          #echo
          ;;
        "freebsd11_x86-connector_c")
          cp -avi ${dir}/*i386.tar.gz ${dir_c}/
          #echo
          #echo "skipping ${dir}"
          #echo
          ;;
        *)
          echo;line
          echo "+fail: ${dir}"
          line;echo
          ;;
      esac
    done
    tree ${dir_c}/
  popd
  echo;echo;echo
}

prep_org_files() {
  # Prep .org files
  echo;line;echo "Prepping org files";line;
  if [[ ! -d "${dir_release}/${dir_c}" ]];then
    mkdir -v ${dir_release}/${dir_c}
  fi
  cp -avi ${cc_home}/${dir_c}/*src* ${dir_release}/${dir_c}/
  pushd ${dir_release}/${dir_c}
    sumgen
    for file in *;do
      echo "+ gpg2 ${gpg_opts} ${file}"
              gpg2 ${gpg_opts} ${file}
    done
  popd
  echo;echo;echo
}

prep_com_files() {
  # Prep .com files
  echo;line;echo "Prepping com files";line;
  pushd ${cc_home}/${dir_c}
    sumgen
    for file in *;do
      echo "+ gpg2 ${ent_gpg_opts} ${file}"
              gpg2 ${ent_gpg_opts} ${file}
    done
  popd
  echo;echo;echo
}

upload_to_the_primary_mirror() {
  local upload
  upload=""
  echo;echo;echo;
  echo;line;echo "Doing a dry-run...";line;
  echo "+ rsync --dry-run -av --delete-after ${dir_release}/${dir_c} ${primary_mirror}:data/"
          rsync --dry-run -av --delete-after ${dir_release}/${dir_c} ${primary_mirror}:data/
  echo;echo;echo
  while [ -z ${upload} ]; do
    userResponse "Does the above look OK? [y/n]"
    case ${ANSWER} in
      "y")
        echo "+ rsync -av --delete-after ${dir_release}/${dir_c} ${primary_mirror}:data/"
                rsync -av --delete-after ${dir_release}/${dir_c} ${primary_mirror}:data/
        echo;echo;echo
        upload="yes"
        return 0
        ;;
      "n")
        echo "Something went wrong..."
        exit 1
        ;;
      *)
        echo "Please answer [y]es or [n]o."
        echo
        upload=""
        ;;
    esac
  done
}

upload_to_the_corp_mirror() {
  local upload
  upload=""
  echo;echo;echo;
  echo;line;echo "Doing a dry-run...";line;
  echo "+ rsync --dry-run -av --delete-after ${cc_home}/${dir_c} ${cc_home_corp}/"
          rsync --dry-run -av --delete-after ${cc_home}/${dir_c} ${cc_home_corp}/
  echo;echo;echo
  while [ -z ${upload} ]; do
    userResponse "Does the above look OK? [y/n]"
    case ${ANSWER} in
      "y")
        echo "+ rsync -av --delete-after ${cc_home}/${dir_c} ${cc_home_corp}/"
                rsync -av --delete-after ${cc_home}/${dir_c} ${cc_home_corp}/
        echo;echo;echo
        upload="yes"
        return 0
        ;;
      "n")
        echo "Something went wrong..."
        exit 1
        ;;
      *)
        echo "Please answer [y]es or [n]o."
        echo
        upload=""
        ;;
    esac
  done
}

#-------------------------------------------------------------------------------
# Main Script
#-------------------------------------------------------------------------------

loadDefaults

if [ "${version}" = "" ]; then
  usage
fi

if [ "${dir_build}" = "" ]; then
  usage
fi

set -eu
  # -e  Exit immediately if a simple command exits with a non-zero status,
  #     unless the command that fails is part of an until or  while loop, part
  #     of an if statement, part of a && or || list, or if the command's return
  #     status is being inverted using !.  -o errexit
  #
  # -u  Treat unset variables as an error when performing parameter expansion.
  #     An error message will be written to the standard error, and a
  #     non-interactive shell will exit.
  #
  # -x  Print a trace of simple commands and their arguments after they are
  #     expanded and before they are executed.

echo;echo;echo
line
echo "Preparing MariaDB Connector/ODBC ${version} release..."
line
echo

shouldI copy_and_stage_files
echo;echo
shouldI prep_org_files
echo;echo
shouldI prep_com_files
echo;echo
shouldI upload_to_the_primary_mirror
echo;echo
shouldI upload_to_the_corp_mirror
echo;echo
echo "+ All done!"
line;line;line
echo;echo;echo

