# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process.properties import Property
from buildbot.steps.shell import ShellCommand, Compile, Test, SetPropertyFromCommand
from buildbot.steps.mtrlogobserver import MTR, MtrLogObserver
import sys

sys.setrecursionlimit(10000)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Load the slave, database passwords and 3rd-party tokens from an external private file, so
# that the rest of the configuration can be public.
config = { "private": { } }
exec(open("master-private.cfg").read(), config, { })

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

builders_fast=["ubuntu-1404-quick", "ubuntu-1604-quick", "ubuntu-1804-quick", "debian-9-quick", "fedora-28-quick", "centos-7-quick", "opensuse-15-quick", "opensuse-42-quick"]

builders_autobake=["centos-7-rpm-autobake", "fedora-28-rpm-autobake", "ubuntu-1404-deb-autobake", "ubuntu-1804-deb-autobake", "ubuntu-1604-deb-autobake"]

c['services'] = []
context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(token=config["private"]["gh_mdbci"]["access_token"],
                                context=context,
                                startDescription='Build started.',
                                endDescription='Build done.',
                                verbose=True,
                                builders=["tarball-docker"] + builders_fast + builders_autobake)
c['services'].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "MariaDB CI"
c['titleURL'] = "https://github.com/MariaDB/server"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://buildbot.mariadb.org/"

# minimalistic config to activate web UI
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

# Plain username auth
#c['www']['authz'] = util.Authz(allowRules=[util.AnyControlEndpointMatcher(role="admins")],
#                               roleMatchers=[util.RolesFromUsername(roles=["admins"], usernames=["admin"])])
#c['www']['auth'] = util.UserPasswordAuth({'admin': config["private"]["user_pass"]["admin"]})

# Github Auth, allow control for MariaDB affiliated accounts
c['www']['authz'] = util.Authz(
  allowRules=[
    util.AnyControlEndpointMatcher(role="MariaDB", defaultDeny=True)
  ],
  roleMatchers=[
    util.RolesFromGroups()
  ]
)
c['www']['auth'] = util.GitHubAuth(config["private"]["gh_mdbauth"]["client"], config["private"]["gh_mdbauth"]["secret"])

# Sponsor plugin
exec(open("sponsor.py").read())

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    'db_url' : config["private"]["db_url"]
}

####### Disable net usage reports from being sent to buildbot.net
c['buildbotNetUsageData'] = None

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []

# Normal workers
def mkWorker(name, **kwargs):
    return worker.Worker(name, config["private"]["worker_pass"][name], **kwargs)

#c['workers'].append(mkWorker("shinnok-bbw1-macos"))
#c['workers'].append(mkWorker("bm-bbw1-ubuntu1804"))

# Docker workers

## hz-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-tarball", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    dockerfile=open("dockerfiles/debian-9.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'1G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'2' }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-debian-9", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    dockerfile=open("dockerfiles/debian-9.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'6' }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-ubuntu-1404", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    dockerfile=open("dockerfiles/ubuntu-1404.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'6' }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-ubuntu-1404-2", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    dockerfile=open("dockerfiles/ubuntu-1404.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'6' }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-ubuntu-1604", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    dockerfile=open("dockerfiles/ubuntu-1604.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'6' }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-ubuntu-1604-2", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    dockerfile=open("dockerfiles/ubuntu-1604.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'6' }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    dockerfile=open("dockerfiles/ubuntu-1804.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'6' }))
c['workers'].append(worker.DockerLatentWorker("hz-bbw1-docker-ubuntu-1804-2", None,
                    docker_host=config["private"]["docker_workers"]["hz-bbw1-docker"],
                    dockerfile=open("dockerfiles/ubuntu-1804.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'6' }))
## gsk-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("gsk-bbw1-docker-fedora-28", None,
                    docker_host=config["private"]["docker_workers"]["gsk-bbw1-docker"],
                    dockerfile=open("dockerfiles/fedora-28.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'6' }))
c['workers'].append(worker.DockerLatentWorker("gsk-bbw1-docker-fedora-28-2", None,
                    docker_host=config["private"]["docker_workers"]["gsk-bbw1-docker"],
                    dockerfile=open("dockerfiles/fedora-28.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'6' }))
c['workers'].append(worker.DockerLatentWorker("gsk-bbw1-docker-centos-7", None,
                    docker_host=config["private"]["docker_workers"]["gsk-bbw1-docker"],
                    dockerfile=open("dockerfiles/centos-7.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'6' }))
c['workers'].append(worker.DockerLatentWorker("gsk-bbw1-docker-centos-7-2", None,
                    docker_host=config["private"]["docker_workers"]["gsk-bbw1-docker"],
                    dockerfile=open("dockerfiles/centos-7.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'6' }))
c['workers'].append(worker.DockerLatentWorker("gsk-bbw1-docker-opensuse-15", None,
                    docker_host=config["private"]["docker_workers"]["gsk-bbw1-docker"],
                    dockerfile=open("dockerfiles/opensuse-15.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'6' }))
c['workers'].append(worker.DockerLatentWorker("gsk-bbw1-docker-opensuse-42", None,
                    docker_host=config["private"]["docker_workers"]["gsk-bbw1-docker"],
                    dockerfile=open("dockerfiles/opensuse-42.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache'],
                    properties={ 'jobs':'6' }))

## bm-bbw1-docker
c['workers'].append(worker.DockerLatentWorker("bm-bbw1-docker-ubuntu-1804", None,
                    docker_host=config["private"]["docker_workers"]["bm-bbw1-docker"],
                    dockerfile=open("dockerfiles/ubuntu-1804.dockerfile").read(),
                    followStartupLogs=True,
                    masterFQDN='buildbot.mariadb.org',
                    hostconfig={ 'shm_size':'6G' },
                    volumes=['/srv/buildbot/ccache:/mnt/ccache']))
####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

####### GitHub hooks

# GitHub webhook receiver
c['www']['change_hook_dialects'] = {
        'github': {
                'secret': config["private"]["gh_secret"],
                'strict': True,
        }
}

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

branches_main=['5.5', '5.5-galera', '10.0', '10.0-galera', '10.1', '10.2', '10.3', '10.4']
# The trees for which we save binary packages.
savedPackageBranches= ["5.5", "10.0", "10.1", "10.2", "10.3", "10.4",
                       "bb-*-release", "bb-10.2-compatibility"]

# git branch filter using fnmatch
import fnmatch
def upstream_branch_fn(branch):
    return branch in branches_main or fnmatch.fnmatch(branch, 'bb-*')
def staging_branch_fn(branch):
    return fnmatch.fnmatch(branch, 'st-*')
def fnmatch_any(s, list_of_patterns):
    return any(fnmatch.fnmatch(s, p) for p in list_of_patterns)

c['schedulers'] = []

# upstream scheduling
schedulerTarball = schedulers.SingleBranchScheduler(
    name="s_upstream_tarball",
    change_filter=util.ChangeFilter(repository="https://github.com/MariaDB/server", branch_fn=upstream_branch_fn),
    treeStableTimer=120,
    builderNames=["tarball-docker"])
c['schedulers'].append(schedulerTarball)

schedulerPlatforms = schedulers.Triggerable( name="s_upstream_all",
    builderNames=builders_fast)
c['schedulers'].append(schedulerPlatforms)

schedulerPackages = schedulers.Triggerable( name="s_packages",
        builderNames=builders_autobake)
c['schedulers'].append(schedulerPackages)

schedulerBigtests = schedulers.Triggerable( name="s_bigtest",
    builderNames=["ubuntu-1804-bigtest"])
c['schedulers'].append(schedulerBigtests)

#c['schedulers'].append(schedulers.ForceScheduler( name="s_upstream_all_force",
#    builderNames=builders_fast))

#--

# Other schedulers
# shinnok
c['schedulers'].append(schedulers.SingleBranchScheduler( name="s_shinnok_bb",
    change_filter=util.ChangeFilter(repository="https://github.com/shinnok/server", branch_re='bb-.*'),
    treeStableTimer=120,
    builderNames=["tarball-docker"]))

'''
c['schedulers'].append(schedulers.Triggerable( name="s_shinnok_all",
    builderNames=builders_fast))
'''
#--

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# mariadb version supported platforms
supportedPlatforms = {}
supportedPlatforms["5.5"] =  ["centos-5","centos-6","centos-7","debian-7",                                                                          "sles-11","sles-12","ubuntu-1404"]
supportedPlatforms["10.0"] = ["centos-5","centos-6","centos-7","debian-7","debian-8",                                   "opensuse-42",              "sles-11","sles-12","ubuntu-1404","ubuntu-1604"]
supportedPlatforms["10.1"] = ["centos-5","centos-6","centos-7","debian-7","debian-8","debian-9",                        "opensuse-42",              "sles-11","sles-12","ubuntu-1404","ubuntu-1604","ubuntu-1804"]
supportedPlatforms["10.2"] = ["centos-5","centos-6","centos-7","debian-7","debian-8","debian-9","fedora-27","fedora-28","opensuse-42","opensuse-15","sles-11","sles-12","ubuntu-1404","ubuntu-1604","ubuntu-1804"]
supportedPlatforms["10.3"] = [           "centos-6","centos-7","debian-7","debian-8","debian-9","fedora-27","fedora-28","opensuse-42","opensuse-15","sles-11","sles-12","ubuntu-1404","ubuntu-1604","ubuntu-1804"]
supportedPlatforms["10.4"] = [           "centos-6","centos-7","debian-7","debian-8","debian-9","fedora-27","fedora-28","opensuse-42","opensuse-15","sles-11","sles-12","ubuntu-1404","ubuntu-1604","ubuntu-1804"]

# Check and set list of builders for branch
def hasBuilders(step):
    mBranch = step.getProperty("master_branch")
    waitIfStaging(step)

    if len(supportedPlatforms[mBranch]) < 1:
        return False
    platformBuilderNames = []
    packagesBuilderNames = []
    bigtestBuilderNames  = []
    for platform in supportedPlatforms[mBranch]:
        for builder in c['builders']:
            if builder.name.startswith(platform):
                if builder.name.endswith("-autobake"):
                    packagesBuilderNames.append(builder.name)
                elif builder.name.endswith("-bigtest"):
                    bigtestBuilderNames.append(builder.name)
                else:
                    platformBuilderNames.append(builder.name)

    platformBuilderNames.sort()
    packagesBuilderNames.sort()
    bigtestBuilderNames.sort()
    schedulerPlatforms.builderNames = platformBuilderNames
    schedulerPackages.builderNames  = packagesBuilderNames
    schedulerBigtests.builderNames  = bigtestBuilderNames
    return True

# Check and set bigtest builders for branch
def hasBigtest(step):
    bigtestBuilderNames = []
    for builder in c['builders']:
        if builder.name.startswith(str(util.Property("buildername"))) and builder.name.endswith("-bigtest"):
            bigtestBuilderNames.append(builder.name)
    if len(bigtestBuilderNames) < 1:
        return False
    bigtestBuilderNames.sort()
    schedulerBigtests.builderNames = bigtestBuilderNames
    return True

# Save packages for current branch?
def savePackage(step):
    return fnmatch_any(step.getProperty("branch"), savedPackageBranches)

# ls2list gets the output of ls and returns a list with the files and directories
def ls2list(rc, stdout, stderr):
    lsFilenames = []
    lsOutput = stdout.strip()

    for l in lsOutput.split('\n'):
        if l != "":
            lsFilenames.append(l.strip())

    return { 'lsFilenames' : lsFilenames }

# checks if the list of files is empty
def hasFiles(step):
  if len(step.getProperty("lsFilenames")) < 1:
    return False
  else:
    return True

# check if branch is a staging branch
def isStagingBranch(step):
  if staging_branch_fn(step.getProperty("branch")):
    step.waitForFinish = True
    return True
  else:
    return False

# returns true if build is succeeding
def ifStagingSucceeding(step):
  if isStagingBranch(step):
    step.setProperty("build_results", step.build.results)
    return step.build.results in (SUCCESS, WARNINGS)
  else:
    return False

# set step's waitForFinish to True if staging branch
def waitIfStaging(step):
  if isStagingBranch(step):
    step.waitForFinish = True
    return True
  else:
    return True

####### FACTORY CODE

## f_tarball - create source tarball
f_tarball = util.BuildFactory()
f_tarball.addStep(steps.ShellCommand(command=["echo", " revision: ", util.Property('revision')]))
f_tarball.addStep(steps.Git(
  repourl=util.Property('repository'),
  mode='full',
  method='clobber',
  workdir='build/server',
  shallow=True,
  submodules=True
))
#f_tarball.addStep(steps.RemoveDirectory(dir="build/mkdist")) #remove dir if it exists, which shouldn't happen for a latent worker
f_tarball.addStep(steps.Compile(command=["cmake","../server"], workdir='build/mkdist'))
f_tarball.addStep(steps.Compile(command=["make", "dist"], workdir='build/mkdist'))
f_tarball.addStep(steps.SetPropertyFromCommand(command="basename mariadb-*.tar.gz .tar.gz", property="mariadb_version", workdir="build/mkdist"))
f_tarball.addStep(steps.SetProperty(property="tarbuildnum", value=util.Interpolate("%(prop:buildnumber)s")))
f_tarball.addStep(steps.SetPropertyFromCommand(command=util.Interpolate("echo " + "%(prop:branch)s"  + " | cut -d'-' -f 2"), property="master_branch"))
f_tarball.addStep(steps.ShellCommand(command=util.Interpolate("mkdir %(prop:buildnumber)s"), workdir="build/mkdist"))
f_tarball.addStep(steps.ShellCommand(command=util.Interpolate("mv %(prop:mariadb_version)s" +".tar.gz" + " %(prop:buildnumber)s"), workdir="build/mkdist"))
f_tarball.addStep(steps.SetPropertyFromCommand(command="ls -1 *", extract_fn=ls2list, workdir=util.Interpolate("build/mkdist/" + "%(prop:buildnumber)s")))
f_tarball.addStep(steps.DirectoryUpload(workersrc=util.Interpolate('%(prop:builddir)s' + '/build/mkdist/' + '%(prop:buildnumber)s'),
    masterdest=util.Interpolate('/srv/buildbot/bb_builds/' + '%(prop:buildnumber)s'), url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:buildnumber)s"), urlText="Download", doStepIf=hasFiles))
f_tarball.addStep(steps.Trigger(schedulerNames=['s_upstream_all'], waitForFinish=False, updateSourceStamp=False,
        set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch")},
        doStepIf=hasBuilders))
f_tarball.addStep(steps.Trigger(schedulerNames=['s_packages'], waitForFinish=False, updateSourceStamp=False,
        set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch")},
        doStepIf=waitIfStaging))
f_tarball.addStep(steps.Trigger(schedulerNames=['s_bigtest'], waitForFinish=False, updateSourceStamp=False,
        set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch")}))

## f_quick_build
f_quick_build = util.BuildFactory()
# get the source tarball and extract it
f_quick_build.addStep(steps.FileDownload(mastersrc=util.Interpolate("/srv/buildbot/bb_builds/" + "%(prop:tarbuildnum)s" + "/" + "%(prop:mariadb_version)s" + ".tar.gz"),
                             workerdest=util.Interpolate("%(prop:mariadb_version)s" + ".tar.gz")))
f_quick_build.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf " + "%(prop:mariadb_version)s" + ".tar.gz --strip-components=1")))
# build steps
f_quick_build.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate("export PATH=/usr/lib/ccache:$PATH && cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_SPIDER=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_PERFSCHEMA=NO -DPLUGIN_SPHINX=NO && make -j%(kw:jobs)s package", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], env={'CCACHE_DIR':'/mnt/ccache'}))
f_quick_build.addStep(steps.MTR(command=
    ["sh", "-c", util.Interpolate("cd mysql-test && exec perl mysql-test-run.pl --verbose-restart --force --retry=3 --skip-test-list=unstable-tests --max-save-core=1 --max-save-datadir=1 --max-test-fail=20 --mem --parallel=$(expr %(kw:jobs)s \* 2)", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=7200))
# create package and upload to master
f_quick_build.addStep(steps.SetPropertyFromCommand(command="basename mariadb-*-linux-*.tar.gz", property="mariadb_binary"))
f_quick_build.addStep(steps.FileUpload(workersrc=util.Interpolate("%(prop:mariadb_binary)s"), masterdest=util.Interpolate('/srv/buildbot/bb_builds/' + '%(prop:tarbuildnum)s' + "/" + '%(prop:buildername)s' + "/" + "%(prop:mariadb_binary)s"), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), urlText="Download", doStepIf=savePackage))
#f_quick_build.addStep(steps.Trigger(schedulerNames=['s_bigtest'], waitForFinish=False, updateSourceStamp=False,
#    set_properties={"tarbuildnum" : Property("tarbuildnum"), "mariadb_version" : Property("mariadb_version"), "master_branch" : Property("master_branch")}, doStepIf=hasBigtest))

## f_big_test
f_big_test = util.BuildFactory()
# get the source tarball and extract it
f_big_test.addStep(steps.FileDownload(mastersrc=util.Interpolate("/srv/buildbot/bb_builds/" + "%(prop:tarbuildnum)s" + "/" + "%(prop:mariadb_version)s" + ".tar.gz"),
    workerdest=util.Interpolate("%(prop:mariadb_version)s" + ".tar.gz")))
f_big_test.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf " + "%(prop:mariadb_version)s" + ".tar.gz --strip-components=1")))
# build steps
f_big_test.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate("export PATH=/usr/lib/ccache:$PATH && cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo  -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DPLUGIN_ROCKSDB=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_SPIDER=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_PERFSCHEMA=NO -DPLUGIN_SPHINX=NO && make -j%(kw:jobs)s VERBOSE=1 package", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], env={'CCACHE_DIR':'/mnt/ccache'}))
f_big_test.addStep(steps.MTR(command=
    ["sh", "-c", util.Interpolate("cd mysql-test && exec perl mysql-test-run.pl --verbose-restart --force --retry=3 --max-save-core=1 --max-save-datadir=1 --max-test-fail=20 --big --big --parallel=$(expr %(kw:jobs)s \* 2)", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], timeout=10800))
# create package and upload to master
f_big_test.addStep(steps.SetPropertyFromCommand(command="basename mariadb-*-linux-*.tar.gz", property="mariadb_binary"))
f_big_test.addStep(steps.FileUpload(workersrc=util.Interpolate("%(prop:mariadb_binary)s"), masterdest=util.Interpolate('/srv/buildbot/bb_builds/' + '%(prop:tarbuildnum)s' + "/" + '%(prop:buildername)s' + "/" + "%(prop:mariadb_binary)s"), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), urlText="Download", doStepIf=savePackage))

## f_deb_autobake
f_deb_autobake= util.BuildFactory()
# get the source tarball and extract it
f_deb_autobake.addStep(steps.FileDownload(mastersrc=util.Interpolate("/srv/buildbot/bb_builds/" + "%(prop:tarbuildnum)s" + "/" + "%(prop:mariadb_version)s" + ".tar.gz"),
                             workerdest=util.Interpolate("%(prop:mariadb_version)s" + ".tar.gz")))
f_deb_autobake.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf " + "%(prop:mariadb_version)s" + ".tar.gz --strip-components=1")))
# build steps
# f_deb_autobake.addStep(steps.ShellCommand(command=['sh', '-c', 'sudo mk-build-deps -r -i debian/control -t "apt-get -y -o Debug::pkgProblemResolver=yes --no-install-recommends"']))
f_deb_autobake.addStep(steps.Compile(command=["debian/autobake-deb.sh"],
    env={'CCACHE_DIR':'/mnt/ccache', 'DEB_BUILD_OPTIONS':util.Interpolate('parallel=%(kw:jobs)s', jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))}))
# upload binaries
f_deb_autobake.addStep(steps.SetPropertyFromCommand(command="ls -1 ../*.deb", extract_fn=ls2list))
f_deb_autobake.addStep(steps.MultipleFileUpload(workersrcs=util.Property('lsFilenames'),
    masterdest=util.Interpolate('/srv/buildbot/bb_builds/' + '%(prop:tarbuildnum)s' + '/' + '%(prop:buildername)s'), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), doStepIf=lambda step: hasFiles(step) and savePackage(step)))

## f_rpm_autobake
f_rpm_autobake= util.BuildFactory()
f_rpm_autobake.workdir=f_rpm_autobake.workdir + "/padding_for_CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX/"
# get the source tarball and extract it
f_rpm_autobake.addStep(steps.FileDownload(mastersrc=util.Interpolate("/srv/buildbot/bb_builds/" + "%(prop:tarbuildnum)s" + "/" + "%(prop:mariadb_version)s" + ".tar.gz"),
                             workerdest=util.Interpolate("%(prop:mariadb_version)s" + ".tar.gz")))
f_rpm_autobake.addStep(steps.ShellCommand(command=util.Interpolate("tar -xvzf " + "%(prop:mariadb_version)s" + ".tar.gz --strip-components=1")))
# build steps
f_rpm_autobake.addStep(steps.Compile(command=
    ["sh", "-c", util.Interpolate("cmake . -DBUILD_CONFIG=mysql_release -DRPM=fedora28 -DWITH_JEMALLOC=auto && make -j %(kw:jobs)s package", jobs=util.Property('jobs', default='$(getconf _NPROCESSORS_ONLN)'))], env={'CCACHE_DIR':'/mnt/ccache'}))
# list rpm contents
f_rpm_autobake.addStep(steps.ShellCommand(command=
    ['sh', '-c', 'for rpm in `ls -1`; do echo $rpm ; rpm -q --qf "[%{FILEMODES:perms} %{FILEUSERNAME} %{FILEGROUPNAME} .%-36{FILENAMES}\n]" $rpm; echo "------------------------------------------------"; done']))
# upload binaries
f_rpm_autobake.addStep(steps.SetPropertyFromCommand(command="ls -1 *.rpm", extract_fn=ls2list))
f_rpm_autobake.addStep(steps.MultipleFileUpload(workersrcs=util.Property('lsFilenames'),
    masterdest=util.Interpolate('/srv/buildbot/bb_builds/' + '%(prop:tarbuildnum)s' + '/' + '%(prop:buildername)s'), mode=0o755, url=util.Interpolate('https://ci.mariadb.org/' + "%(prop:tarbuildnum)s" + "/" + '%(prop:buildername)s' + "/"), doStepIf=lambda step: hasFiles(step) and savePackage(step)))

## f_macos_10_13
f_macos_10_13 = util.BuildFactory()
f_macos_10_13.addStep(steps.Git(repourl=util.Property('repository'), mode='incremental'))
f_macos_10_13.addStep(steps.Compile(command=
    ["sh", "-c", "cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_ASAN=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl/ -DOPENSSL_LIBRARIES=/usr/local/opt/openssl/lib -DPLUGIN_TOKUDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_SPIDER=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_PERFSCHEMA=NO -DPLUGIN_SPHINX=NO && make -j$(getconf _NPROCESSORS_ONLN) VERBOSE=1"]))
f_macos_10_13.addStep(steps.MTR(command=
    ["sh", "-c", "cd mysql-test && exec perl mysql-test-run.pl  --verbose-restart --force --retry=3  --max-save-core=1 --max-save-datadir=1 --parallel=$(getconf _NPROCESSORS_ONLN)"], timeout=7200))

####### BUILDERS LIST
c['builders'] = []

'''
 c['builders'].append(
    util.BuilderConfig(name="macos-10-13",
      workernames=["shinnok-bbw1-macos"],
      factory=f_macos_10_13))
'''

c['builders'].append(
    util.BuilderConfig(name="tarball-docker",
      workernames=["hz-bbw1-docker-tarball"],
      tags=["tar", "bake"],
      factory=f_tarball))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1404-quick",
      workernames=["hz-bbw1-docker-ubuntu-1404"],
      tags=["Ubuntu", "quick", "gcc"],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1404-deb-autobake",
      workernames=["hz-bbw1-docker-ubuntu-1404-2"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1604-quick",
      workernames=["hz-bbw1-docker-ubuntu-1604"],
      tags=["Ubuntu", "quick", "gcc"],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1604-deb-autobake",
      workernames=["hz-bbw1-docker-ubuntu-1604-2"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-quick",
      workernames=["hz-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "quick", "gcc"],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-deb-autobake",
      workernames=["hz-bbw1-docker-ubuntu-1804-2"],
      tags=["Ubuntu", "deb", "bake", "gcc"],
      factory=f_deb_autobake))

c['builders'].append(
    util.BuilderConfig(name="ubuntu-1804-bigtest",
      workernames=["bm-bbw1-docker-ubuntu-1804"],
      tags=["Ubuntu", "big", "gcc"],
      factory=f_big_test))

c['builders'].append(
    util.BuilderConfig(name="debian-9-quick",
      workernames=["hz-bbw1-docker-debian-9"],
      tags=["Debian", "quick", "gcc"],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="fedora-28-quick",
      workernames=["gsk-bbw1-docker-fedora-28"],
      tags=["Fedora", "quick", "gcc"],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="fedora-28-rpm-autobake",
      workernames=["gsk-bbw1-docker-fedora-28-2"],
      tags=["Fedora", "rpm", "bake", "gcc"],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="centos-7-quick",
      workernames=["gsk-bbw1-docker-centos-7"],
      tags=["Centos", "quick", "gcc"],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="centos-7-rpm-autobake",
      workernames=["gsk-bbw1-docker-centos-7-2"],
      tags=["Centos", "rpm", "bake", "gcc"],
      factory=f_rpm_autobake))

c['builders'].append(
    util.BuilderConfig(name="opensuse-15-quick",
      workernames=["gsk-bbw1-docker-opensuse-15"],
      tags=["OpenSUSE", "quick", "gcc"],
      factory=f_quick_build))

c['builders'].append(
    util.BuilderConfig(name="opensuse-42-quick",
      workernames=["gsk-bbw1-docker-opensuse-42"],
      tags=["OpenSUSE", "quick", "gcc"],
      factory=f_quick_build))
